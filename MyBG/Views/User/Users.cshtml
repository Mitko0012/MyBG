@model MyBG.Models.Users
@using Microsoft.AspNetCore.Identity
@using MyBG.Data
@inject SignInManager<IdentityUser> SignInManager
@inject ApplicationDbContext Ctx

@{
    ViewData["Title"] = "Users";
}

<h1>Users</h1>
<br />
@{
    foreach(var user in Model.AllUsers)
    {
        if(user != null)
        {
            <div class="user-div">
                <div class="user-data">
                    <img class="profile-pic" src="@Ctx.PFPs.FirstOrDefault(x => x.UserName == user.UserName).ReturnFile" />
                </div>
                <div class="user-data-name">
                    <a asp-controller="User" class="comment-username" asp-action="UserPage" asp-route-userName = "@user.UserName">@user.UserName</a>
                </div>
                <div class="user-role">
                    <p class="user-text">@SignInManager.UserManager.GetRolesAsync(user).Result[0]</p>
                </div>
            </div>
            if(SignInManager.IsSignedIn(User))
            {
                if(SignInManager.UserManager.GetRolesAsync(SignInManager.UserManager.GetUserAsync(User).Result).Result.Contains("Manager") && SignInManager.UserManager.GetRolesAsync(user).Result.Contains("Admin"))
                {
                    <a asp-controller="Admin" class="admin-button" asp-action="RemoveFromAdmin" asp-route-userName="@user.UserName">Remove admin rights</a>
                }
                if(SignInManager.UserManager.GetRolesAsync(SignInManager.UserManager.GetUserAsync(User).Result).Result.Contains("Manager") && SignInManager.UserManager.GetRolesAsync(user).Result.Contains("User"))
                {
                    <a asp-controller="Admin" class="admin-button-positive" asp-action="AddToAdmin" asp-route-userName="@user.UserName">Give admin rights</a>
                }
                if (!SignInManager.UserManager.GetRolesAsync(user).Result.Contains("Admin") && !SignInManager.UserManager.GetRolesAsync(user).Result.Contains("Manager") && (SignInManager.UserManager.GetRolesAsync(SignInManager.UserManager.GetUserAsync(User).Result).Result.Contains("Admin") || SignInManager.UserManager.GetRolesAsync(SignInManager.UserManager.GetUserAsync(User).Result).Result.Contains("Manager")))
                {
                    <a asp-controller="Admin" class="admin-button" asp-action="DeleteUserPage" asp-route-userName="@user.UserName">Delete user</a>
                }
                if (SignInManager.UserManager.GetRolesAsync(user).Result.Contains("Admin") && SignInManager.UserManager.GetRolesAsync(SignInManager.UserManager.GetUserAsync(User).Result).Result.Contains("Manager"))
                {
                    <a asp-controller="Admin" class="admin-button" asp-action="DeleteAdminPage" asp-route-userName="@user.UserName">Delete user</a>
                }
            }
            <hr />
        }
    }
    if(SignInManager.UserManager.GetRolesAsync(SignInManager.UserManager.GetUserAsync(User).Result).Result.Contains("Manager"))
    {
        @if(Model.DeletedUsers.Count > 0)
        {
            <h3>Deleted users</h3>
        }
        <hr />
        foreach(var user in Model.DeletedUsers)
        {
            <div class="user-div">
                <div class="user-data">
                    <img class="profile-pic" src="@Ctx.PFPs.FirstOrDefault(x => x.UserName == user.UserName).ReturnFile" />
                </div>
                <div class="user-data-name">
                    <a asp-controller="User" class="comment-username" asp-action="UserPage" asp-route-userName = "@user.UserName">@user.UserName</a>
                </div>
                <div class="user-role">
                    <p class="user-text">@SignInManager.UserManager.GetRolesAsync(user).Result[0]</p>
                </div>
            </div>
            <a asp-controller="Admin" class="admin-button-positive" asp-action="Restore" asp-route-userName="@user.UserName">Restore user</a>
            <hr />
        }
    }
}


